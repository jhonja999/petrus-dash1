// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Roles disponibles en el sistema
enum Role {
  Conductor    // Usuario que maneja los camiones
  ADMIN        // Administrador del sistema
}

/// Estados posibles para usuarios
enum UserState {
  Activo
  Inactivo
  Suspendido
  Eliminado
  Asignado
}

/// Estados posibles para camiones
enum TruckState {
  Activo
  Inactivo
  Mantenimiento
  Transito
  Descarga
  Asignado
}

/// Tipos de combustible
enum FuelType {
  DIESEL_B5
  GASOLINA_90
  GASOLINA_95
  GLP
  ELECTRICA
}

/// Tipos de licencia de conducir
enum LicenseType {
  A1      // Motocicletas hasta 125cc
  A2      // Motocicletas hasta 400cc
  A3      // Motocicletas de cualquier cilindrada
  B1      // Automóviles hasta 3.5 toneladas
  B2A     // Camiones hasta 7.5 toneladas
  B2B     // Camiones hasta 15 toneladas
  B2C     // Camiones de más de 15 toneladas
  B3      // Vehículos articulados
  B4      // Transporte de pasajeros
}

/// Modelo de Usuario
model User {
  id              Int           @id @default(autoincrement())
  dni             String        @unique
  name            String
  lastname        String
  email           String        @unique
  password        String        @default("peru2025++")
  clerkId         String?       @unique
  role            Role          @default(Conductor)
  state           UserState     @default(Activo)
  
  // Campos específicos para conductores
  licenseNumber   String?       // Número de licencia de conducir
  licenseType     LicenseType?  // Tipo de licencia
  licenseExpiry   DateTime?     // Fecha de vencimiento de licencia
  phone           String?       // Teléfono del conductor
  address         String?       // Dirección del conductor
  emergencyContact String?      // Contacto de emergencia
  emergencyPhone  String?       // Teléfono de emergencia
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Assignment      Assignment[]

  @@index([role, state])
  @@index([clerkId])
  @@index([licenseType])
}

/// Modelo de Camión
model Truck {
  id              Int           @id @default(autoincrement())
  placa           String        @unique
  typefuel        FuelType
  capacitygal     Decimal       @db.Decimal(10, 2)
  state           TruckState    @default(Activo)
  
  // Especificaciones técnicas
  brand           String?       // Marca del camión
  model           String?       // Modelo del camión
  year            Int?          // Año de fabricación
  engineNumber    String?       // Número de motor
  chassisNumber   String?       // Número de chasis
  color           String?       // Color del vehículo
  mileage         Decimal?      @db.Decimal(10, 2) // Kilometraje actual
  maxWeight       Decimal?      @db.Decimal(10, 2) // Peso máximo permitido
  
  // Información de mantenimiento
  lastMaintenance DateTime?     // Última fecha de mantenimiento
  nextMaintenance DateTime?     // Próxima fecha de mantenimiento
  maintenanceKm   Decimal?      @db.Decimal(10, 2) // Kilometraje del último mantenimiento
  
  // Información de seguro
  insuranceCompany String?      // Compañía de seguros
  insurancePolicy  String?      // Número de póliza
  insuranceExpiry  DateTime?    // Vencimiento del seguro
  
  // Información adicional
  notes           String?       // Notas adicionales
  
  Assignment      Assignment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([state])
  @@index([brand])
  @@index([year])
}

/// Modelo de Cliente
model Customer {
  id           Int         @id @default(autoincrement())
  companyname  String      @unique
  ruc          String      @unique
  address      String
  contactName  String?
  contactPhone String?
  contactEmail String?
  Discharge    Discharge[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

/// Modelo de Asignación
model Assignment {
  id             Int           @id @default(autoincrement())
  truckId        Int
  driverId       Int
  totalLoaded    Decimal       @db.Decimal(10, 2)
  totalRemaining Decimal       @db.Decimal(10, 2)
  fuelType       FuelType
  notes          String?
  isCompleted    Boolean       @default(false)
  date           DateTime      @default(now())

  truck      Truck       @relation(fields: [truckId], references: [id])
  driver     User        @relation(fields: [driverId], references: [id])
  discharges Discharge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([truckId])
  @@index([driverId])
  @@index([isCompleted])
}

/// Modelo de Descarga
model Discharge {
  id              Int           @id @default(autoincrement())
  assignmentId    Int
  customerId      Int
  totalDischarged Decimal       @db.Decimal(10, 2)
  startMarker     Decimal       @db.Decimal(10, 2)
  endMarker       Decimal       @db.Decimal(10, 2)
  notes           String?

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  customer   Customer   @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([assignmentId])
  @@index([customerId])
  @@index([assignmentId, customerId])
}
